name: CI

on:
  pull_request:
  workflow_call:
    inputs:
      ref:
        description: Git ref to checkout when manually running the workflow. Uses github.ref if unspecified.
        type: string
        default: ''
      crate:
        description: Where possible, run the checks for a specific crate only.
        type: string
        default: 'all'

  workflow_dispatch:
    inputs:
      ref:
        description: Git ref to checkout when manually running the workflow. Uses github.ref if unspecified.
        type: string
        default: ''
      crate:
        description: Where possible, run the checks for a specific crate only.
        type: choice
        options:
          - all
          - bherror
          - bhx5chain

permissions:
  contents: read

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
  CARGO_PROFILE: ci
  CARGO_ENABLE_WHOLE_WORKSPACE: ${{ contains(fromJSON('["all", ""]'), inputs.crate) }}
  # Cannot use CARGO_ENABLE_WHOLE_WORKSPACE here since env context is unavailable within env
  CARGO_PACKAGE_FLAG: ${{ !contains(fromJSON('["all", ""]'), inputs.crate) && format('-p {0}', inputs.crate) || '' }}
  GIT_CHECKOUT_REF: ${{ inputs.ref != '' && inputs.ref || github.ref }}
  RUSTFLAGS: -D warnings
  RUST_VERSION: 'stable'

jobs:
  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_CHECKOUT_REF }}

      - uses: EmbarkStudios/cargo-deny-action@34899fc7ba81ca6268d5947a7a16b4649013fea1
        with:
          command: check advisories bans licenses sources
          manifest-path: ${{ env.CARGO_ENABLE_WHOLE_WORKSPACE == 'false' && format('./{0}/Cargo.toml', inputs.crate) || './Cargo.toml' }}

  check-for-unused-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_CHECKOUT_REF }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@c5a29ddb4d9d194e7c84ec8c3fba61b1c31fee8c
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Check Cache
        uses: Swatinem/rust-cache@27b8ea9368cf428f0bfe41b0876b1a7e809d9844

      - name: Setup Cargo Machete
        run: cargo install --locked cargo-machete --version ^0.6

      - name: Check for Unused Dependencies
        run: cargo machete

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_CHECKOUT_REF }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@c5a29ddb4d9d194e7c84ec8c3fba61b1c31fee8c
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Check Cache
        uses: Swatinem/rust-cache@27b8ea9368cf428f0bfe41b0876b1a7e809d9844

      - name: Build Docs
        run: RUSTDOCFLAGS="-D warnings" cargo doc --all-features --profile "${CARGO_PROFILE}" ${CARGO_PACKAGE_FLAG} ${DOCS_WORKSPACE_FLAG} --no-deps
        env:
          DOCS_WORKSPACE_FLAG: ${{ env.CARGO_ENABLE_WHOLE_WORKSPACE == 'true' && '--workspace' || '' }}

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_CHECKOUT_REF }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@c5a29ddb4d9d194e7c84ec8c3fba61b1c31fee8c
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy rustfmt

      - name: Copyright and License Check
        run: ./.github/scripts/check_copyright_license.sh

      - name: Check Formatting
        run: cargo fmt ${CARGO_PACKAGE_FLAG} --check

      - name: Run Clippy
        run: cargo clippy ${CARGO_PACKAGE_FLAG} --profile ${{ env.CARGO_PROFILE }} --all-targets --all-features

  test:
    strategy:
      matrix:
        os:
          # MacOS on Intel architecture
          - macos-13
          - macos-latest
          - ubuntu-24.04-arm
          - ubuntu-latest
          - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GIT_CHECKOUT_REF }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@c5a29ddb4d9d194e7c84ec8c3fba61b1c31fee8c
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Check Cache
        uses: Swatinem/rust-cache@27b8ea9368cf428f0bfe41b0876b1a7e809d9844

      - name: Test
        run: cargo test --all-features ${{ env.CARGO_PACKAGE_FLAG }} --profile ${{ env.CARGO_PROFILE }}
